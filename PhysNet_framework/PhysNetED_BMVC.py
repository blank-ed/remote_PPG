'''
Code of 'Remote Photoplethysmograph Signal Measurement from Facial Videos Using Spatio-Temporal Networks' 
By Zitong Yu, 2019/05/05

If you use the code, please cite:
@inproceedings{yu2019remote,
    title={Remote Photoplethysmograph Signal Measurement from Facial Videos Using Spatio-Temporal Networks},
    author={Yu, Zitong and Li, Xiaobai and Zhao, Guoying},
    booktitle= {British Machine Vision Conference (BMVC)},
    year = {2019}
}

Only for research purpose, and commercial use is not allowed.

MIT License
Copyright (c) 2019 
'''



import math
import torch.nn as nn
from torch.nn.modules.utils import _triple
import torch
import pdb

from PhysNet.NegPearsonLoss import Neg_Pearson


class PhysNet_padding_Encoder_Decoder_MAX(nn.Module):
    def __init__(self, frames=256):
        super(PhysNet_padding_Encoder_Decoder_MAX, self).__init__()
        
        self.ConvBlock1 = nn.Sequential(
            nn.Conv3d(3, 16, [1,5,5],stride=1, padding=[0,2,2]),
            nn.BatchNorm3d(16),
            nn.ReLU(inplace=True),
        )

        self.ConvBlock2 = nn.Sequential(
            nn.Conv3d(16, 32, [3, 3, 3], stride=1, padding=1),
            nn.BatchNorm3d(32),
            nn.ReLU(inplace=True),
        )
        self.ConvBlock3 = nn.Sequential(
            nn.Conv3d(32, 64, [3, 3, 3], stride=1, padding=1),
            nn.BatchNorm3d(64),
            nn.ReLU(inplace=True),
        )
        
        self.ConvBlock4 = nn.Sequential(
            nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1),
            nn.BatchNorm3d(64),
            nn.ReLU(inplace=True),
        )
        self.ConvBlock5 = nn.Sequential(
            nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1),
            nn.BatchNorm3d(64),
            nn.ReLU(inplace=True),
        )
        self.ConvBlock6 = nn.Sequential(
            nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1),
            nn.BatchNorm3d(64),
            nn.ReLU(inplace=True),
        )
        self.ConvBlock7 = nn.Sequential(
            nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1),
            nn.BatchNorm3d(64),
            nn.ReLU(inplace=True),
        )
        self.ConvBlock8 = nn.Sequential(
            nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1),
            nn.BatchNorm3d(64),
            nn.ReLU(inplace=True),
        )
        self.ConvBlock9 = nn.Sequential(
            nn.Conv3d(64, 64, [3, 3, 3], stride=1, padding=1),
            nn.BatchNorm3d(64),
            nn.ReLU(inplace=True),
        )
        
        self.upsample = nn.Sequential(
            nn.ConvTranspose3d(in_channels=64, out_channels=64, kernel_size=[4,1,1], stride=[2,1,1], padding=[1,0,0]),   #[1, 128, 32]
            nn.BatchNorm3d(64),
            nn.ELU(),
        )
        self.upsample2 = nn.Sequential(
            nn.ConvTranspose3d(in_channels=64, out_channels=64, kernel_size=[4,1,1], stride=[2,1,1], padding=[1,0,0]),   #[1, 128, 32]
            nn.BatchNorm3d(64),
            nn.ELU(),
        )
 
        self.ConvBlock10 = nn.Conv3d(64, 1, [1,1,1],stride=1, padding=0)
        
        self.MaxpoolSpa = nn.MaxPool3d((1, 2, 2), stride=(1, 2, 2))
        self.MaxpoolSpaTem = nn.MaxPool3d((2, 2, 2), stride=2)
        
        
        #self.poolspa = nn.AdaptiveMaxPool3d((frames,1,1))    # pool only spatial space 
        self.poolspa = nn.AdaptiveAvgPool3d((frames,1,1))

        
    def forward(self, x):	    	# x [3, T, 128,128]
        x_visual = x
        [batch,channel,length,width,height] = x.shape
          
        x = self.ConvBlock1(x)		     # x [3, T, 128,128]
        x = self.MaxpoolSpa(x)       # x [16, T, 64,64]
        
        x = self.ConvBlock2(x)		    # x [32, T, 64,64]
        x_visual6464 = self.ConvBlock3(x)	    	# x [32, T, 64,64]
        x = self.MaxpoolSpaTem(x_visual6464)      # x [32, T/2, 32,32]    Temporal halve
        
        x = self.ConvBlock4(x)		    # x [64, T/2, 32,32]
        x_visual3232 = self.ConvBlock5(x)	    	# x [64, T/2, 32,32]
        x = self.MaxpoolSpaTem(x_visual3232)      # x [64, T/4, 16,16]
        

        x = self.ConvBlock6(x)		    # x [64, T/4, 16,16]
        x_visual1616 = self.ConvBlock7(x)	    	# x [64, T/4, 16,16]
        x = self.MaxpoolSpa(x_visual1616)      # x [64, T/4, 8,8]

        x = self.ConvBlock8(x)		    # x [64, T/4, 8, 8]
        x = self.ConvBlock9(x)		    # x [64, T/4, 8, 8]
        x = self.upsample(x)		    # x [64, T/2, 8, 8]
        x = self.upsample2(x)		    # x [64, T, 8, 8]
        
        
        x = self.poolspa(x)     # x [64, T, 1,1]    -->  groundtruth left and right - 7 
        x = self.ConvBlock10(x)    # x [1, T, 1,1]
        
        rPPG = x.view(-1,length)            
        

        return rPPG, x_visual, x_visual3232, x_visual1616


# import cv2
#
# # Load the input image
# cap = cv2.VideoCapture(
#     r'C:\Users\Admin\Desktop\Riccardo New Dataset\test_L00_no_ex_riccardo_all_distances\D02.mp4')  # Start 15:44:11 End 15:42:12
# face_cascade = cv2.CascadeClassifier(r"C:\Users\Admin\PycharmProjects\pythonProject2\remote_PPG\Necessary_Files\haarcascade_frontalface_default.xml")
# inputs = []
# while True:
#     ret, frame = cap.read()
#     if not ret:
#         break
#
#     gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
#     faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5, minSize=(30, 30))
#
#     for (x, y, w, h) in faces:
#         roi = frame[y:y + h, x:x + w]
#         resized_image = cv2.resize(roi, (128, 128))
#
#     inputs.append(resized_image)
#     # cv2.imshow("Facial Landmarks", frame)
#     # cv2.imshow('roi', resized_image)
#
#     if cv2.waitKey(1) & 0xFF == ord('q'):
#         break
#
# cap.release()
# cv2.destroyAllWindows()
#
# import numpy as np
#
# BVP_signals = [25, 25, 33, 43, 48, 55, 65, 60, 50, 44, 42, 40, 40, 40, 36, 31, 29, 23, 22, 21, 19, 17, 16, 15, 13, 11, 11, 9, 9, 9, 12, 26, 36, 64, 68, 66, 53, 47, 42, 40, 40, 41, 40, 36, 31, 26, 24, 23, 23, 22, 22, 20, 19, 18, 17, 17, 16, 15, 15, 20, 38, 58, 74, 74, 67, 60, 55, 51, 48, 47, 46, 43, 38, 33, 28, 25, 24, 23, 23, 23, 22, 20, 18, 18, 17, 17, 16, 15, 15, 26, 46, 69, 79, 76, 70, 65, 61, 56, 54, 54, 53, 50, 45, 41, 38, 36, 34, 32, 31, 29, 28, 27, 26, 24, 22, 21, 21, 26, 40, 59, 73, 73, 65, 56, 48, 43, 43, 46, 47, 46, 41, 38, 34, 32, 32, 32, 31, 30, 28, 27, 25, 23, 23, 22, 22, 23, 43, 65, 74, 82, 76, 73, 63, 58, 56, 56, 56, 55, 47, 42, 40, 36, 34, 33, 31, 31, 30, 28, 26, 25, 23, 21, 21, 20, 25, 32, 66, 84, 88, 84, 79, 77, 69, 63, 62, 60, 58, 56, 49, 44, 40, 39, 37, 35, 33, 32, 30, 29, 26, 23, 22, 20, 18, 17, 19, 33, 54, 73, 79, 75, 68, 61, 55, 51, 49, 49, 47, 43, 39, 35, 32, 31, 30, 28, 27, 25, 23, 21, 20, 19, 18, 17, 17, 21, 36, 56, 71, 72, 65, 58, 51, 46, 44, 44, 44, 40, 35, 30, 26, 23, 23, 22, 21, 20, 19, 17, 16, 15, 14, 13, 12, 12, 18, 36, 57, 72, 72, 65, 58, 53, 49, 46, 44, 42, 40, 35, 30, 25, 23, 22, 22, 22, 23, 22, 21, 20, 18, 17, 15, 15, 28, 49, 61, 79, 74, 70, 61, 56, 53, 48, 48, 48, 44, 40, 38, 33, 31, 30, 27, 26, 25, 23, 21, 20, 19, 18, 18, 32, 52, 72, 77, 73, 63, 60, 51, 47, 46, 46, 44, 43, 36, 31, 29, 25, 25, 26, 26, 25, 25, 23, 21, 20, 18, 17, 18, 30, 50, 74, 72, 63, 52, 44, 40, 41, 44, 45, 41, 36, 30, 26, 26, 26, 26, 26, 25, 24, 23, 22, 20, 19, 19, 27, 45, 66, 76, 72, 57, 48, 42, 40, 41, 42, 40, 35, 30, 26, 25, 25, 25, 25, 25, 24, 23, 21, 19, 16, 14, 15, 26, 47, 70, 80, 75, 67, 60, 54, 48, 46, 45, 42, 38, 33, 28, 26, 25, 25, 25, 25, 24, 23, 22, 20, 19, 18, 17, 18, 26, 45, 69, 83, 82, 74, 67, 62, 57, 52, 51, 49, 45, 40, 37, 34, 32, 32, 31, 30, 29, 28, 26, 25, 23, 22, 22, 20, 20, 22, 44, 65, 73, 74, 66, 61, 51, 47, 46, 48, 46, 40, 38, 31, 28, 27, 28, 28, 27, 25, 24, 24, 22, 21, 20, 19, 19, 22, 45, 66, 73, 75, 66, 62, 53, 49, 48, 49, 47, 42, 37, 34, 32, 31, 30, 29, 28, 27, 25, 23, 21, 21, 21, 19, 19, 25, 42, 64, 81, 81, 74, 67, 62, 58, 55, 55, 55, 53, 46, 41, 38, 37, 37, 35, 34, 32, 30, 28, 26, 25, 24, 24, 23, 23, 26, 40, 62, 83, 91, 86, 80, 74, 68, 63, 60, 60, 59, 52, 46, 40, 38, 37, 35, 34, 32, 31, 29, 27, 25, 24, 23, 22, 21, 20, 21, 34, 53, 72, 78, 72, 64, 56, 51, 48, 50, 51, 49, 44, 39, 34, 32, 31, 30, 31, 30, 28, 26, 24, 23, 21, 21, 20, 18, 18, 27, 46, 58, 79, 76, 72, 60, 54, 51, 47, 47, 47, 43, 39, 37, 31, 29, 29, 28, 28, 27, 24, 22, 21, 19, 18, 18, 18, 17, 17, 30, 52, 64, 84, 80, 76, 67, 62, 60, 54, 52, 51, 46, 42, 40, 35, 33, 32, 30, 28, 27, 26, 25, 23, 21, 21, 20, 19, 18, 17, 21, 36, 59, 77, 80, 73, 65, 58, 53, 51, 52, 52, 49, 41, 36, 33, 31, 30, 30, 30, 29, 27, 26, 23, 22, 21, 20, 20, 18, 19, 28, 47, 69, 81, 77, 69, 61, 54, 51, 53, 54, 53, 46, 40, 35, 32, 32, 31, 31, 30, 28, 27, 24, 22, 22, 21, 21, 20, 19, 20, 33, 55, 77, 86, 81, 74, 68, 63, 60, 59, 59, 58, 52, 47, 42, 40, 38, 36, 34, 33, 32, 29, 27, 25, 23, 22, 21, 21, 20, 19, 19, 21, 46, 71, 82, 91, 85, 82, 75, 70, 67, 62, 60, 56, 53, 45, 40, 39, 36, 34, 33, 30, 28, 27, 23, 20, 20, 19, 18, 18, 17, 16, 16, 26, 46, 57, 77, 73, 69, 59, 53, 50, 50, 50, 47, 45, 38, 34, 32, 30, 29, 28, 28, 27, 25, 22, 21, 19, 18, 18, 17, 17, 16, 19, 31, 52, 71, 77, 71, 63, 53, 50, 49, 50, 50, 46, 40, 35, 31, 29, 29, 29, 28, 26, 25, 24, 23, 20, 19, 18, 18, 17, 16, 16, 19, 34, 56, 77, 82, 77, 58, 57, 55, 53, 52, 44, 40, 38, 36, 35, 34, 32, 30, 30, 27, 26, 25, 23, 22, 22, 21, 20, 20, 24, 40, 51, 81, 84, 78, 72, 67, 63, 60, 58, 58, 55, 49, 44, 40, 38, 37, 36, 34, 32, 30, 27, 25, 23, 22, 21, 20, 19, 18, 17, 25, 41, 51, 71, 66, 58, 54, 45, 45, 46, 48, 45, 43, 35, 32, 31, 29, 28, 28, 28, 26, 25, 21, 21, 20, 19, 18, 18, 18, 26, 34, 64, 74, 67, 63, 53, 48, 47, 46, 46, 45, 38, 33, 30, 27, 27, 27, 26, 25, 24, 23, 21, 19, 18, 18, 18, 17, 17, 19, 32, 53, 73, 78, 71, 67, 62, 57, 53, 52, 50, 47, 42, 38, 34, 31, 30, 29, 29, 28, 26, 25, 23, 22, 21, 20, 20, 19, 19, 18, 20, 34, 65, 79, 78, 72, 66, 61, 56, 53, 51, 51, 48, 43, 39, 36, 34, 33, 33, 32, 31, 29, 28, 26, 25, 25, 24, 24, 24, 24, 23, 26, 49, 69, 80, 78, 70, 64, 58, 54, 53, 53, 51, 47, 41, 37, 33, 31, 31, 31, 30, 29, 28, 26, 24, 22, 21, 19, 19, 18, 16, 16, 28, 48, 59, 77, 73, 69, 58, 53, 51, 48, 48, 47, 42, 38, 35, 28, 26, 26, 25, 25, 25, 22, 21, 21, 19, 18, 18, 17, 17, 16, 15, 18, 22, 53, 74, 80, 76, 69, 66, 59, 54, 53, 51, 51, 49, 42, 38, 36, 33, 32, 31, 30, 28, 27, 26, 24, 23, 21, 21, 21, 20, 19, 18, 20, 34, 55, 75, 81, 75, 67, 61, 55, 53, 53, 53, 51, 47, 41, 37, 34, 32, 33, 33, 33, 32, 30, 29, 27, 26, 26, 26, 25, 25, 24, 28, 43, 66, 83, 85, 78, 70, 63, 59, 58, 59, 60, 57, 52, 46, 42, 40, 40, 39, 39, 37, 35, 33, 30, 27, 26, 26, 25, 24, 23, 24, 34, 55, 79, 90, 88, 81, 76, 72, 69, 66, 66, 65, 61, 56, 51, 46, 43, 41, 40, 40, 37, 34, 32, 29, 27, 26, 25, 25, 23, 23, 23, 34, 55, 67, 92, 91, 88, 79, 75, 73, 69, 68, 68, 63, 58, 55, 47, 45, 44, 42, 41, 40, 35, 32, 29, 27, 25, 23, 23, 21, 20, 19, 29, 48, 60, 82, 81, 78, 69, 63, 62, 61, 62, 62, 57, 51, 48, 40, 39, 39, 38, 37, 33, 31, 28, 26, 25, 24, 23, 22, 21, 22, 33, 53, 75, 86, 85, 79, 73, 68, 65, 63, 63, 60, 55, 49, 43, 40, 38, 36, 35, 32, 30, 26, 24, 21, 20, 18, 17, 16, 14, 14, 18, 36, 59, 78, 82, 78, 73, 69, 65, 61, 58, 56, 53, 48, 42, 38, 34, 32, 31, 29, 27, 24, 22, 19, 17, 16, 14, 13, 13, 11, 10, 11, 25, 47, 69, 77, 75, 69, 65, 60, 55, 54, 53, 51, 46, 40, 35, 31, 28, 27, 26, 24, 21, 19, 18, 16, 15, 14, 13, 13, 11, 10, 10, 22, 40, 51, 71, 68, 65, 53, 47, 46, 47, 48, 48, 43, 38, 36, 30, 28, 27, 27, 27, 25, 24, 20, 18, 18, 16, 16, 16, 15, 14, 14, 32, 55, 67, 82, 77, 73, 65, 60, 59, 57, 57, 56, 50, 41, 37, 35, 34, 33, 32, 30, 28, 25, 23, 21, 19, 18, 18, 17, 16, 15, 20, 37, 61, 82, 87, 83, 76, 72, 67, 64, 61, 60, 58, 50, 43, 39, 36, 34, 33, 32, 30, 28, 26, 24, 22, 20, 19, 18, 17, 16, 15, 17, 28, 50, 74, 84, 82, 76, 70, 65, 62, 61, 61, 58, 52, 46, 41, 40, 38, 36, 34, 32, 30, 27, 25, 23, 21, 20, 19, 18, 17, 15, 20, 36, 59, 78, 82, 78, 71, 65, 60, 59, 60, 60, 57, 52, 46, 41, 38, 36, 35, 34, 33, 31, 29, 27, 23, 22, 21, 19, 18, 17, 18, 30, 40, 77, 89, 90, 82, 77, 75, 69, 67, 66, 64, 60, 57, 47, 42, 40, 37, 34, 33, 30, 27, 26, 23, 20, 19, 17, 17, 16, 15, 14, 16, 41, 68, 79, 92, 89, 87, 82, 78, 76, 72, 71, 69, 50, 47, 44, 42, 41, 40, 39, 38, 36, 35, 33, 32, 30, 29, 28, 28, 27, 26, 26, 31, 40, 52, 60, 61, 59, 54, 51, 50, 51, 51, 50, 47, 43, 41, 40, 39, 38, 37, 36, 34, 33, 31, 30, 29, 28, 28, 27, 27, 26, 27, 34, 46, 57, 62, 60, 57, 55, 53, 51, 50, 50, 48, 44, 41, 39, 37, 35, 35, 34, 33, 32, 31, 30, 30, 29, 29, 29, 28, 27, 26, 26, 30, 40, 52, 61, 61, 58, 56, 54, 52, 51, 50, 48, 46, 43, 40, 38, 36, 35, 35, 35, 36, 35, 36, 36, 35, 35, 34, 33, 32, 29, 28, 28, 45, 58, 67, 69, 69, 67, 66, 63, 62, 63, 62, 60, 58, 52, 49, 48, 48, 48, 48, 46, 45, 44, 41, 40, 39, 38, 37, 36, 36, 41, 57, 61, 64, 59, 56, 48, 45, 45, 46, 45, 42, 39, 35, 32, 30, 28, 27, 25, 24, 23, 21, 20, 19, 18, 17, 17, 21, 33, 46, 58, 50, 48, 46, 45, 45, 44, 42, 39, 36, 34, 32, 31, 30, 29, 28, 27, 25, 24, 23, 22, 21, 22, 30, 42, 55, 60, 59, 54, 51, 49, 47, 46, 46, 44, 41, 39, 36, 34, 33, 32, 32, 32, 30, 29, 27, 24, 23, 22, 24, 33, 45, 56, 59, 57, 53, 49, 46, 45, 46, 45, 42]

# inputs = np.array(inputs)
#
# #1. Inference the model
# model = PhysNet_padding_Encoder_Decoder_MAX(frames=128)
# rPPG, x_visual, x_visual3232, x_visual1616 = model(inputs)
#
# #2. Normalized the Predicted rPPG signal and GroundTruth BVP signal
# rPPG = (rPPG-torch.mean(rPPG)) /torch.std(rPPG)	 	# normalize
# BVP_label = (BVP_label-torch.mean(BVP_label)) /torch.std(BVP_label)	 	# normalize
#
# #3. Calculate the loss
# loss_ecg = Neg_Pearson(rPPG, BVP_label)




# import cv2
# import numpy as np
# import pandas as pd
# import torch
# import torch.nn as nn
# from torch.utils.data import TensorDataset, DataLoader
# from torch.optim import Adam
#
# # Put the PhysNet_padding_Encoder_Decoder_MAX and Neg_Pearson classes here
#
#
# def load_video(video_file, max_frames=256):
#     cap = cv2.VideoCapture(video_file)
#     frames = []
#     while True:
#         ret, frame = cap.read()
#         if not ret or len(frames) == max_frames:
#             break
#         frame = cv2.resize(frame, (128, 128))  # Resize frame to 128 x 128
#         frames.append(frame)
#     cap.release()
#     return np.array(frames)
#
#
# def load_bvp(bvp_file):
#     bvp_data = pd.read_csv(bvp_file)
#     return bvp_data.values
#
#
# def main():
#     # Set device
#     device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
#
#     # Set up data loading
#     video_file = r'C:\Users\Admin\Desktop\Riccardo New Dataset\test_L00_no_ex_riccardo_all_distances\D02.mp4'
#     # bvp_file = 'path_to_your_bvp'
#     video_data = load_video(video_file)
#     bvp_data = [25, 25, 33, 43, 48, 55, 65, 60, 50, 44, 42, 40, 40, 40, 36, 31, 29, 23, 22, 21, 19, 17, 16, 15, 13, 11, 11, 9, 9, 9, 12, 26, 36, 64, 68, 66, 53, 47, 42, 40, 40, 41, 40, 36, 31, 26, 24, 23, 23, 22, 22, 20, 19, 18, 17, 17, 16, 15, 15, 20, 38, 58, 74, 74, 67, 60, 55, 51, 48, 47, 46, 43, 38, 33, 28, 25, 24, 23, 23, 23, 22, 20, 18, 18, 17, 17, 16, 15, 15, 26, 46, 69, 79, 76, 70, 65, 61, 56, 54, 54, 53, 50, 45, 41, 38, 36, 34, 32, 31, 29, 28, 27, 26, 24, 22, 21, 21, 26, 40, 59, 73, 73, 65, 56, 48, 43, 43, 46, 47, 46, 41, 38, 34, 32, 32, 32, 31, 30, 28, 27, 25, 23, 23, 22, 22, 23, 43, 65, 74, 82, 76, 73, 63, 58, 56, 56, 56, 55, 47, 42, 40, 36, 34, 33, 31, 31, 30, 28, 26, 25, 23, 21, 21, 20, 25, 32, 66, 84, 88, 84, 79, 77, 69, 63, 62, 60, 58, 56, 49, 44, 40, 39, 37, 35, 33, 32, 30, 29, 26, 23, 22, 20, 18, 17, 19, 33, 54, 73, 79, 75, 68, 61, 55, 51, 49, 49, 47, 43, 39, 35, 32, 31, 30, 28, 27, 25, 23, 21, 20, 19, 18, 17, 17, 21, 36, 56, 71, 72, 65, 58, 51, 46, 44, 44, 44, 40, 35, 30, 26, 23, 23, 22, 21, 20, 19, 17, 16, 15, 14, 13, 12, 12, 18, 36, 57, 72, 72, 65, 58, 53, 49, 46, 44, 42, 40, 35, 30, 25, 23, 22, 22, 22, 23, 22, 21, 20, 18, 17, 15, 15, 28, 49, 61, 79, 74, 70, 61, 56, 53, 48, 48, 48, 44, 40, 38, 33, 31, 30, 27, 26, 25, 23, 21, 20, 19, 18, 18, 32, 52, 72, 77, 73, 63, 60, 51, 47, 46, 46, 44, 43, 36, 31, 29, 25, 25, 26, 26, 25, 25, 23, 21, 20, 18, 17, 18, 30, 50, 74, 72, 63, 52, 44, 40, 41, 44, 45, 41, 36, 30, 26, 26, 26, 26, 26, 25, 24, 23, 22, 20, 19, 19, 27, 45, 66, 76, 72, 57, 48, 42, 40, 41, 42, 40, 35, 30, 26, 25, 25, 25, 25, 25, 24, 23, 21, 19, 16, 14, 15, 26, 47, 70, 80, 75, 67, 60, 54, 48, 46, 45, 42, 38, 33, 28, 26, 25, 25, 25, 25, 24, 23, 22, 20, 19, 18, 17, 18, 26, 45, 69, 83, 82, 74, 67, 62, 57, 52, 51, 49, 45, 40, 37, 34, 32, 32, 31, 30, 29, 28, 26, 25, 23, 22, 22, 20, 20, 22, 44, 65, 73, 74, 66, 61, 51, 47, 46, 48, 46, 40, 38, 31, 28, 27, 28, 28, 27, 25, 24, 24, 22, 21, 20, 19, 19, 22, 45, 66, 73, 75, 66, 62, 53, 49, 48, 49, 47, 42, 37, 34, 32, 31, 30, 29, 28, 27, 25, 23, 21, 21, 21, 19, 19, 25, 42, 64, 81, 81, 74, 67, 62, 58, 55, 55, 55, 53, 46, 41, 38, 37, 37, 35, 34, 32, 30, 28, 26, 25, 24, 24, 23, 23, 26, 40, 62, 83, 91, 86, 80, 74, 68, 63, 60, 60, 59, 52, 46, 40, 38, 37, 35, 34, 32, 31, 29, 27, 25, 24, 23, 22, 21, 20, 21, 34, 53, 72, 78, 72, 64, 56, 51, 48, 50, 51, 49, 44, 39, 34, 32, 31, 30, 31, 30, 28, 26, 24, 23, 21, 21, 20, 18, 18, 27, 46, 58, 79, 76, 72, 60, 54, 51, 47, 47, 47, 43, 39, 37, 31, 29, 29, 28, 28, 27, 24, 22, 21, 19, 18, 18, 18, 17, 17, 30, 52, 64, 84, 80, 76, 67, 62, 60, 54, 52, 51, 46, 42, 40, 35, 33, 32, 30, 28, 27, 26, 25, 23, 21, 21, 20, 19, 18, 17, 21, 36, 59, 77, 80, 73, 65, 58, 53, 51, 52, 52, 49, 41, 36, 33, 31, 30, 30, 30, 29, 27, 26, 23, 22, 21, 20, 20, 18, 19, 28, 47, 69, 81, 77, 69, 61, 54, 51, 53, 54, 53, 46, 40, 35, 32, 32, 31, 31, 30, 28, 27, 24, 22, 22, 21, 21, 20, 19, 20, 33, 55, 77, 86, 81, 74, 68, 63, 60, 59, 59, 58, 52, 47, 42, 40, 38, 36, 34, 33, 32, 29, 27, 25, 23, 22, 21, 21, 20, 19, 19, 21, 46, 71, 82, 91, 85, 82, 75, 70, 67, 62, 60, 56, 53, 45, 40, 39, 36, 34, 33, 30, 28, 27, 23, 20, 20, 19, 18, 18, 17, 16, 16, 26, 46, 57, 77, 73, 69, 59, 53, 50, 50, 50, 47, 45, 38, 34, 32, 30, 29, 28, 28, 27, 25, 22, 21, 19, 18, 18, 17, 17, 16, 19, 31, 52, 71, 77, 71, 63, 53, 50, 49, 50, 50, 46, 40, 35, 31, 29, 29, 29, 28, 26, 25, 24, 23, 20, 19, 18, 18, 17, 16, 16, 19, 34, 56, 77, 82, 77, 58, 57, 55, 53, 52, 44, 40, 38, 36, 35, 34, 32, 30, 30, 27, 26, 25, 23, 22, 22, 21, 20, 20, 24, 40, 51, 81, 84, 78, 72, 67, 63, 60, 58, 58, 55, 49, 44, 40, 38, 37, 36, 34, 32, 30, 27, 25, 23, 22, 21, 20, 19, 18, 17, 25, 41, 51, 71, 66, 58, 54, 45, 45, 46, 48, 45, 43, 35, 32, 31, 29, 28, 28, 28, 26, 25, 21, 21, 20, 19, 18, 18, 18, 26, 34, 64, 74, 67, 63, 53, 48, 47, 46, 46, 45, 38, 33, 30, 27, 27, 27, 26, 25, 24, 23, 21, 19, 18, 18, 18, 17, 17, 19, 32, 53, 73, 78, 71, 67, 62, 57, 53, 52, 50, 47, 42, 38, 34, 31, 30, 29, 29, 28, 26, 25, 23, 22, 21, 20, 20, 19, 19, 18, 20, 34, 65, 79, 78, 72, 66, 61, 56, 53, 51, 51, 48, 43, 39, 36, 34, 33, 33, 32, 31, 29, 28, 26, 25, 25, 24, 24, 24, 24, 23, 26, 49, 69, 80, 78, 70, 64, 58, 54, 53, 53, 51, 47, 41, 37, 33, 31, 31, 31, 30, 29, 28, 26, 24, 22, 21, 19, 19, 18, 16, 16, 28, 48, 59, 77, 73, 69, 58, 53, 51, 48, 48, 47, 42, 38, 35, 28, 26, 26, 25, 25, 25, 22, 21, 21, 19, 18, 18, 17, 17, 16, 15, 18, 22, 53, 74, 80, 76, 69, 66, 59, 54, 53, 51, 51, 49, 42, 38, 36, 33, 32, 31, 30, 28, 27, 26, 24, 23, 21, 21, 21, 20, 19, 18, 20, 34, 55, 75, 81, 75, 67, 61, 55, 53, 53, 53, 51, 47, 41, 37, 34, 32, 33, 33, 33, 32, 30, 29, 27, 26, 26, 26, 25, 25, 24, 28, 43, 66, 83, 85, 78, 70, 63, 59, 58, 59, 60, 57, 52, 46, 42, 40, 40, 39, 39, 37, 35, 33, 30, 27, 26, 26, 25, 24, 23, 24, 34, 55, 79, 90, 88, 81, 76, 72, 69, 66, 66, 65, 61, 56, 51, 46, 43, 41, 40, 40, 37, 34, 32, 29, 27, 26, 25, 25, 23, 23, 23, 34, 55, 67, 92, 91, 88, 79, 75, 73, 69, 68, 68, 63, 58, 55, 47, 45, 44, 42, 41, 40, 35, 32, 29, 27, 25, 23, 23, 21, 20, 19, 29, 48, 60, 82, 81, 78, 69, 63, 62, 61, 62, 62, 57, 51, 48, 40, 39, 39, 38, 37, 33, 31, 28, 26, 25, 24, 23, 22, 21, 22, 33, 53, 75, 86, 85, 79, 73, 68, 65, 63, 63, 60, 55, 49, 43, 40, 38, 36, 35, 32, 30, 26, 24, 21, 20, 18, 17, 16, 14, 14, 18, 36, 59, 78, 82, 78, 73, 69, 65, 61, 58, 56, 53, 48, 42, 38, 34, 32, 31, 29, 27, 24, 22, 19, 17, 16, 14, 13, 13, 11, 10, 11, 25, 47, 69, 77, 75, 69, 65, 60, 55, 54, 53, 51, 46, 40, 35, 31, 28, 27, 26, 24, 21, 19, 18, 16, 15, 14, 13, 13, 11, 10, 10, 22, 40, 51, 71, 68, 65, 53, 47, 46, 47, 48, 48, 43, 38, 36, 30, 28, 27, 27, 27, 25, 24, 20, 18, 18, 16, 16, 16, 15, 14, 14, 32, 55, 67, 82, 77, 73, 65, 60, 59, 57, 57, 56, 50, 41, 37, 35, 34, 33, 32, 30, 28, 25, 23, 21, 19, 18, 18, 17, 16, 15, 20, 37, 61, 82, 87, 83, 76, 72, 67, 64, 61, 60, 58, 50, 43, 39, 36, 34, 33, 32, 30, 28, 26, 24, 22, 20, 19, 18, 17, 16, 15, 17, 28, 50, 74, 84, 82, 76, 70, 65, 62, 61, 61, 58, 52, 46, 41, 40, 38, 36, 34, 32, 30, 27, 25, 23, 21, 20, 19, 18, 17, 15, 20, 36, 59, 78, 82, 78, 71, 65, 60, 59, 60, 60, 57, 52, 46, 41, 38, 36, 35, 34, 33, 31, 29, 27, 23, 22, 21, 19, 18, 17, 18, 30, 40, 77, 89, 90, 82, 77, 75, 69, 67, 66, 64, 60, 57, 47, 42, 40, 37, 34, 33, 30, 27, 26, 23, 20, 19, 17, 17, 16, 15, 14, 16, 41, 68, 79, 92, 89, 87, 82, 78, 76, 72, 71, 69, 50, 47, 44, 42, 41, 40, 39, 38, 36, 35, 33, 32, 30, 29, 28, 28, 27, 26, 26, 31, 40, 52, 60, 61, 59, 54, 51, 50, 51, 51, 50, 47, 43, 41, 40, 39, 38, 37, 36, 34, 33, 31, 30, 29, 28, 28, 27, 27, 26, 27, 34, 46, 57, 62, 60, 57, 55, 53, 51, 50, 50, 48, 44, 41, 39, 37, 35, 35, 34, 33, 32, 31, 30, 30, 29, 29, 29, 28, 27, 26, 26, 30, 40, 52, 61, 61, 58, 56, 54, 52, 51, 50, 48, 46, 43, 40, 38, 36, 35, 35, 35, 36, 35, 36, 36, 35, 35, 34, 33, 32, 29, 28, 28, 45, 58, 67, 69, 69, 67, 66, 63, 62, 63, 62, 60, 58, 52, 49, 48, 48, 48, 48, 46, 45, 44, 41, 40, 39, 38, 37, 36, 36, 41, 57, 61, 64, 59, 56, 48, 45, 45, 46, 45, 42, 39, 35, 32, 30, 28, 27, 25, 24, 23, 21, 20, 19, 18, 17, 17, 21, 33, 46, 58, 50, 48, 46, 45, 45, 44, 42, 39, 36, 34, 32, 31, 30, 29, 28, 27, 25, 24, 23, 22, 21, 22, 30, 42, 55, 60, 59, 54, 51, 49, 47, 46, 46, 44, 41, 39, 36, 34, 33, 32, 32, 32, 30, 29, 27, 24, 23, 22, 24, 33, 45, 56, 59, 57, 53, 49, 46, 45, 46, 45, 42]
#     bvp_data = np.array(bvp_data[0:256])
#     video_tensor = torch.from_numpy(video_data).permute(3, 0, 1, 2).float().unsqueeze(0)  # Add a batch dimension
#     bvp_tensor = torch.from_numpy(bvp_data).float().unsqueeze(0)  # Add a batch dimension
#
#     dataset = TensorDataset(video_tensor, bvp_tensor)
#     data_loader = DataLoader(dataset, batch_size=10, shuffle=True)
#
#     # Set up model, loss function and optimizer
#     model = PhysNet_padding_Encoder_Decoder_MAX().to(device)
#     loss_function = Neg_Pearson().to(device)
#     optimizer = Adam(model.parameters(), lr=1e-4)
#
#     # Start training
#     num_epochs = 15
#     for epoch in range(num_epochs):
#         for video, bvp in data_loader:
#             video, bvp = video.to(device), bvp.to(device)
#
#             # Forward pass
#             rPPG, _, _, _ = model(video)
#             rPPG = (rPPG-torch.mean(rPPG)) /torch.std(rPPG)    # normalize
#             BVP_label = (bvp-torch.mean(bvp)) /torch.std(bvp)    # normalize
#
#             # Compute loss
#             loss = loss_function(rPPG, BVP_label)
#
#             # Backward pass and optimization
#             optimizer.zero_grad()
#             loss.backward()
#             optimizer.step()
#
#         print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item()}')
#
# if __name__ == "__main__":
#     main()
